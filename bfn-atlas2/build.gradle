buildscript {
    ext {
        corda_platform_version = 7
        minimum_platform_version = 7
        corda_release_group = 'net.corda'
        corda_release_version = '4.5'
        tokens_release_group = 'com.r3.corda.lib.tokens'
        tokens_release_version = '1.0'
        accounts_release_group = 'com.r3.corda.lib.accounts'
        accounts_release_version = '1.0'
        corda_gradle_plugins_version = '5.0.6'
        kotlin_version = '1.3.72'
        junit_version = '4.12'
        quasar_version = '0.7.12_r3'
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
        slf4j_version = '1.7.25'
        log4j_version = '2.9.1'
        corda_core_release_group = 'net.corda'
        confidential_id_release_group = "com.r3.corda.lib.ci"
        confidential_id_release_version = "1.0"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

allprojects {
    apply plugin: 'kotlin'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        // Can be removed post-release - used to get nightly snapshot build.
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-lib' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-lib-dev' }
        maven { url 'https://jitpack.io' }
        maven { url "https://repo.gradle.org/gradle/libs-releases-local" }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            javaParameters = true   // Useful for reflection.
        }
    }

    jar {
        // Don't include log config files.
        exclude "**/log4j2*.xml"
        // We need this because log4j2.xml is pulled in from multiple dependency JARs.
        // JAR signing will fail if there are multiple files with the same name.
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {
    // Kotlin.
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Corda dependencies.
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":workflows")
    cordapp project(":contracts")

    // For logging.
    testCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    testCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"

    // Token SDK dependencies.
    cordapp "$tokens_release_group:tokens-contracts:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-workflows:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-money:$tokens_release_version"

    cordapp "$accounts_release_group:accounts-contracts:$accounts_release_version"
    cordapp "$accounts_release_group:accounts-workflows:$accounts_release_version"

    cordapp "$confidential_id_release_group:ci-workflows:$confidential_id_release_version"

}
cordapp {
    targetPlatformVersion 5
    minimumPlatformVersion 4
    contract {
        name "BFN Contracts and States"
        vendor "OneConnect"
        licence "Apache or MIT"
        versionId 1
    }
    workflow {
        name "BFN Workflows"
        vendor "OneConnect"
        licence "Apache"
        versionId 1
    }
}
task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(':contracts')
        cordapp project(':workflows')
        cordapp("$tokens_release_group:tokens-contracts:$tokens_release_version")
        cordapp("$tokens_release_group:tokens-workflows:$tokens_release_version")
        cordapp("$tokens_release_group:tokens-money:$tokens_release_version")

        cordapp "$accounts_release_group:accounts-contracts:$accounts_release_version"
        cordapp "$accounts_release_group:accounts-workflows:$accounts_release_version"

        cordapp("$confidential_id_release_group:ci-workflows:$confidential_id_release_version")
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

    node {
        name "O=AnchorInvestor,L=London,C=GB"
        p2pPort 1000
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10043")
        }
    }

    node {
        name "O=Customer001,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
    }

    node {
        name "O=Regulator,L=Pretoria,C=ZA"
        p2pPort 10020
        rpcSettings {
            address("localhost:10017")
            adminAddress("localhost:10057")
        }
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort 10018
        rpcSettings {
            address("localhost:10019")
            adminAddress("localhost:10058")
        }
    }

}

task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}

test {
    exclude '**/*'
}

